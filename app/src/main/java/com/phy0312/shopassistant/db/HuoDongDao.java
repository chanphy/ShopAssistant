package com.phy0312.shopassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.phy0312.shopassistant.db.HuoDong;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HUO_DONG.
*/
public class HuoDongDao extends AbstractDao<HuoDong, Long> {

    public static final String TABLENAME = "HUO_DONG";

    /**
     * Properties of entity HuoDong.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HuoDongId = new Property(1, String.class, "HuoDongId", false, "HUO_DONG_ID");
        public final static Property StoreId = new Property(2, String.class, "StoreId", false, "STORE_ID");
        public final static Property StartTime = new Property(3, Long.class, "StartTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, Long.class, "EndTime", false, "END_TIME");
        public final static Property Category = new Property(5, Integer.class, "Category", false, "CATEGORY");
        public final static Property Description = new Property(6, String.class, "Description", false, "DESCRIPTION");
        public final static Property Name = new Property(7, String.class, "Name", false, "NAME");
        public final static Property Icon = new Property(8, String.class, "Icon", false, "ICON");
        public final static Property Status = new Property(9, Integer.class, "Status", false, "STATUS");
        public final static Property CreateTime = new Property(10, java.util.Date.class, "CreateTime", false, "CREATE_TIME");
    };


    public HuoDongDao(DaoConfig config) {
        super(config);
    }
    
    public HuoDongDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HUO_DONG' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HUO_DONG_ID' TEXT," + // 1: HuoDongId
                "'STORE_ID' TEXT," + // 2: StoreId
                "'START_TIME' INTEGER," + // 3: StartTime
                "'END_TIME' INTEGER," + // 4: EndTime
                "'CATEGORY' INTEGER," + // 5: Category
                "'DESCRIPTION' TEXT," + // 6: Description
                "'NAME' TEXT," + // 7: Name
                "'ICON' TEXT," + // 8: Icon
                "'STATUS' INTEGER," + // 9: Status
                "'CREATE_TIME' INTEGER);"); // 10: CreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HUO_DONG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HuoDong entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String HuoDongId = entity.getHuoDongId();
        if (HuoDongId != null) {
            stmt.bindString(2, HuoDongId);
        }
 
        String StoreId = entity.getStoreId();
        if (StoreId != null) {
            stmt.bindString(3, StoreId);
        }
 
        Long StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(4, StartTime);
        }
 
        Long EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(5, EndTime);
        }
 
        Integer Category = entity.getCategory();
        if (Category != null) {
            stmt.bindLong(6, Category);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(7, Description);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(8, Name);
        }
 
        String Icon = entity.getIcon();
        if (Icon != null) {
            stmt.bindString(9, Icon);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(10, Status);
        }
 
        java.util.Date CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(11, CreateTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HuoDong readEntity(Cursor cursor, int offset) {
        HuoDong entity = new HuoDong( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // HuoDongId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StoreId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // StartTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // EndTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Category
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Icon
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // Status
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // CreateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HuoDong entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHuoDongId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStoreId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCategory(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HuoDong entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HuoDong entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
