package com.phy0312.shopassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.phy0312.shopassistant.db.MainItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MAIN_ITEM.
*/
public class MainItemDao extends AbstractDao<MainItem, Long> {

    public static final String TABLENAME = "MAIN_ITEM";

    /**
     * Properties of entity MainItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WeekRecommends = new Property(1, String.class, "WeekRecommends", false, "WEEK_RECOMMENDS");
        public final static Property Coupons = new Property(2, String.class, "Coupons", false, "COUPONS");
        public final static Property HuoDongs = new Property(3, String.class, "HuoDongs", false, "HUO_DONGS");
        public final static Property Flims = new Property(4, Long.class, "Flims", false, "FLIMS");
    };


    public MainItemDao(DaoConfig config) {
        super(config);
    }
    
    public MainItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MAIN_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'WEEK_RECOMMENDS' TEXT," + // 1: WeekRecommends
                "'COUPONS' TEXT," + // 2: Coupons
                "'HUO_DONGS' TEXT," + // 3: HuoDongs
                "'FLIMS' INTEGER);"); // 4: Flims
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MAIN_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MainItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String WeekRecommends = entity.getWeekRecommends();
        if (WeekRecommends != null) {
            stmt.bindString(2, WeekRecommends);
        }
 
        String Coupons = entity.getCoupons();
        if (Coupons != null) {
            stmt.bindString(3, Coupons);
        }
 
        String HuoDongs = entity.getHuoDongs();
        if (HuoDongs != null) {
            stmt.bindString(4, HuoDongs);
        }
 
        Long Flims = entity.getFlims();
        if (Flims != null) {
            stmt.bindLong(5, Flims);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MainItem readEntity(Cursor cursor, int offset) {
        MainItem entity = new MainItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // WeekRecommends
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Coupons
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // HuoDongs
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // Flims
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MainItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWeekRecommends(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoupons(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHuoDongs(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFlims(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MainItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MainItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
