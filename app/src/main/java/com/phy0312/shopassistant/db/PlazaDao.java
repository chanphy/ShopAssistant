package com.phy0312.shopassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.phy0312.shopassistant.db.Plaza;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLAZA.
*/
public class PlazaDao extends AbstractDao<Plaza, Long> {

    public static final String TABLENAME = "PLAZA";

    /**
     * Properties of entity Plaza.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityId = new Property(1, String.class, "CityId", false, "CITY_ID");
        public final static Property CreateTime = new Property(2, java.util.Date.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Latitude = new Property(3, Double.class, "Latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(4, Double.class, "Longitude", false, "LONGITUDE");
        public final static Property Name = new Property(5, String.class, "Name", false, "NAME");
        public final static Property PinYin = new Property(6, String.class, "PinYin", false, "PIN_YIN");
        public final static Property PlazaId = new Property(7, String.class, "PlazaId", false, "PLAZA_ID");
        public final static Property Address = new Property(8, String.class, "Address", false, "ADDRESS");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Type = new Property(10, Integer.class, "Type", false, "TYPE");
    };


    public PlazaDao(DaoConfig config) {
        super(config);
    }
    
    public PlazaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLAZA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CITY_ID' TEXT," + // 1: CityId
                "'CREATE_TIME' INTEGER," + // 2: CreateTime
                "'LATITUDE' REAL," + // 3: Latitude
                "'LONGITUDE' REAL," + // 4: Longitude
                "'NAME' TEXT NOT NULL ," + // 5: Name
                "'PIN_YIN' TEXT," + // 6: PinYin
                "'PLAZA_ID' TEXT NOT NULL ," + // 7: PlazaId
                "'ADDRESS' TEXT," + // 8: Address
                "'PHONE' TEXT," + // 9: phone
                "'TYPE' INTEGER);"); // 10: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLAZA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Plaza entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CityId = entity.getCityId();
        if (CityId != null) {
            stmt.bindString(2, CityId);
        }
 
        java.util.Date CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(3, CreateTime.getTime());
        }
 
        Double Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindDouble(4, Latitude);
        }
 
        Double Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindDouble(5, Longitude);
        }
        stmt.bindString(6, entity.getName());
 
        String PinYin = entity.getPinYin();
        if (PinYin != null) {
            stmt.bindString(7, PinYin);
        }
        stmt.bindString(8, entity.getPlazaId());
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(9, Address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
 
        Integer Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(11, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Plaza readEntity(Cursor cursor, int offset) {
        Plaza entity = new Plaza( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CityId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // CreateTime
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Latitude
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // Longitude
            cursor.getString(offset + 5), // Name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PinYin
            cursor.getString(offset + 7), // PlazaId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Plaza entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLatitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setName(cursor.getString(offset + 5));
        entity.setPinYin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlazaId(cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Plaza entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Plaza entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
