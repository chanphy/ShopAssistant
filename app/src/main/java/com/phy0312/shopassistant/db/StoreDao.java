package com.phy0312.shopassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.phy0312.shopassistant.db.Store;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STORE.
*/
public class StoreDao extends AbstractDao<Store, Long> {

    public static final String TABLENAME = "STORE";

    /**
     * Properties of entity Store.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoreId = new Property(1, String.class, "StoreId", false, "STORE_ID");
        public final static Property PlazaId = new Property(2, String.class, "PlazaId", false, "PLAZA_ID");
        public final static Property Category = new Property(3, Integer.class, "Category", false, "CATEGORY");
        public final static Property Name = new Property(4, String.class, "Name", false, "NAME");
        public final static Property Address = new Property(5, String.class, "Address", false, "ADDRESS");
        public final static Property AverageCost = new Property(6, Integer.class, "AverageCost", false, "AVERAGE_COST");
        public final static Property Icon = new Property(7, String.class, "Icon", false, "ICON");
        public final static Property Telephone = new Property(8, String.class, "Telephone", false, "TELEPHONE");
        public final static Property Floor = new Property(9, Integer.class, "Floor", false, "FLOOR");
        public final static Property Status = new Property(10, Integer.class, "Status", false, "STATUS");
        public final static Property CreateTime = new Property(11, java.util.Date.class, "CreateTime", false, "CREATE_TIME");
        public final static Property Description = new Property(12, String.class, "Description", false, "DESCRIPTION");
    };


    public StoreDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STORE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STORE_ID' TEXT," + // 1: StoreId
                "'PLAZA_ID' TEXT," + // 2: PlazaId
                "'CATEGORY' INTEGER," + // 3: Category
                "'NAME' TEXT," + // 4: Name
                "'ADDRESS' TEXT," + // 5: Address
                "'AVERAGE_COST' INTEGER," + // 6: AverageCost
                "'ICON' TEXT," + // 7: Icon
                "'TELEPHONE' TEXT," + // 8: Telephone
                "'FLOOR' INTEGER," + // 9: Floor
                "'STATUS' INTEGER," + // 10: Status
                "'CREATE_TIME' INTEGER," + // 11: CreateTime
                "'DESCRIPTION' TEXT);"); // 12: Description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Store entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String StoreId = entity.getStoreId();
        if (StoreId != null) {
            stmt.bindString(2, StoreId);
        }
 
        String PlazaId = entity.getPlazaId();
        if (PlazaId != null) {
            stmt.bindString(3, PlazaId);
        }
 
        Integer Category = entity.getCategory();
        if (Category != null) {
            stmt.bindLong(4, Category);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(5, Name);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(6, Address);
        }
 
        Integer AverageCost = entity.getAverageCost();
        if (AverageCost != null) {
            stmt.bindLong(7, AverageCost);
        }
 
        String Icon = entity.getIcon();
        if (Icon != null) {
            stmt.bindString(8, Icon);
        }
 
        String Telephone = entity.getTelephone();
        if (Telephone != null) {
            stmt.bindString(9, Telephone);
        }
 
        Integer Floor = entity.getFloor();
        if (Floor != null) {
            stmt.bindLong(10, Floor);
        }
 
        Integer Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(11, Status);
        }
 
        java.util.Date CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(12, CreateTime.getTime());
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(13, Description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Store readEntity(Cursor cursor, int offset) {
        Store entity = new Store( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // StoreId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PlazaId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Address
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // AverageCost
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Icon
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Telephone
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // Floor
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // Status
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // CreateTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // Description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Store entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoreId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlazaId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAverageCost(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTelephone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFloor(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setDescription(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Store entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Store entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
